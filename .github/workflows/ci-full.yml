name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-smoke:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [11, 17]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '${{ matrix.java }}'

      - name: Verify Java
        run: |
          java -version
          javac -version || true

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties') }}

      - name: Compile api-rest (fast)
        run: |
          ./gradlew :modules:api-rest:compileJava --no-daemon --console=plain --quiet

      - name: Run smoke tests (Hello)
        run: |
          cat > Hello.java <<'JAVA'
          public class Hello { public static void main(String[] a){ System.out.println("Hello, world"); } }
          JAVA
          javac Hello.java
          OUT=$(java Hello)
          echo "Hello output: '$OUT'"
          if [ "$OUT" != "Hello, world" ]; then echo "Bad output"; exit 1; fi

      - name: README lint (markdownlint)
        run: |
          npm install -g markdownlint-cli@0.34.0 || true
          markdownlint README.md || true

      - name: Check XSL files exist
        run: |
          missing=0
          for f in modules/api-rest/src/main/resources/xsl/*.xsl; do
            if [ ! -f "$f" ]; then missing=1; fi
          done
          if [ $missing -eq 1 ]; then echo "Missing XSL files"; exit 1; fi

      - name: "Optional: Start server and health check"
        env:
          JAVA_TOOL_OPTIONS: -Xmx512m
        run: |
          # start server in background
          ./gradlew :modules:api-rest:run --no-daemon --console=plain --stacktrace &
          pid=$!
          echo "server PID: $pid"
          # wait for /health up to 20s
          for i in `seq 1 20`; do
            if curl -sSf http://localhost:8080/health >/dev/null 2>&1; then
              echo "health ok"
              break
            fi
            sleep 1
          done
          if ! curl -sSf http://localhost:8080/health >/dev/null 2>&1; then
            echo "Health check failed"; kill $pid || true; exit 1
          fi
          # stop server
          kill $pid || true
        
